package com.baeldung.ls.persistence.repository.impl;

import com.baeldung.ls.persistence.model.Project;
import com.baeldung.ls.persistence.repository.IProjectRepository;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import java.sql.Date;
import java.sql.PreparedStatement;
import java.util.List;
import java.util.Optional;

@Repository
public class ProjectRepositoryImpl implements IProjectRepository {

    private final JdbcTemplate jdbcTemplate;

    public ProjectRepositoryImpl(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public Optional<Project> findById(Long id) {
        List<Project> projects = jdbcTemplate.query(
                "SELECT id, name, date_created from project WHERE id = ?",
                (resultSet, rowNum) -> new Project(
                        resultSet.getLong("id"),
                        resultSet.getString("name"),
                        resultSet.getDate("date_created").toLocalDate()),
                id);

        return projects.stream().findAny();
    }

    @Override
    public Project save(Project project) {
        KeyHolder keyHolder = new GeneratedKeyHolder();
        jdbcTemplate.update(
                connection -> {
                    PreparedStatement statement = connection.prepareStatement(
                            "INSERT INTO project (name, date_created) VALUES (?, ?)", new String[] {"id"});
                    statement.setString(1, project.getName());
                    statement.setDate(2, Date.valueOf(project.getDateCreated()));
                    return statement;
                },
                keyHolder);

        long autogeneratedId = keyHolder.getKey().longValue();

        return findById(autogeneratedId).get();
    }
}